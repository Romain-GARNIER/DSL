// automatically generated by Xtext
grammar arduinoML.concretesyntax.ArduinoML with org.eclipse.xtext.common.Terminals

import "fr.uns.polytech.al.arduinoML" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
    'app' name=EString 'initial state' initial=[State|EString]
    '{'
        'bricks'  bricks+=Brick ( bricks+=Brick)*  
        'states' states+=State (states+=State)*
    '}';



Brick returns Brick:
    (Sensor | Actuator) type=Type name=EString ':' pin=EInt;

Actuator returns Actuator:
    {Actuator}
    'Actuator';

Sensor returns Sensor:
    {Sensor}
    'Sensor';


EString returns ecore::EString:
    STRING | ID;

EInt returns ecore::EInt:
    '-'? INT;
    
State returns State:
    name=EString
    '{'
    	actions+=Action (actions+=Action)* 
    	(errors+=SinkError)*
        transitions+=Transition (transitions+=Transition)* 
    '}';

Action returns Action :
        actuator=[Actuator|EString] '<=' value=Signal;

Transition returns Transition:
	'if' '('basecondition=BaseCondition')' (booleancondition+=BooleanCondition)* '=>' next=[State|EString]; 
	

BaseCondition:
	sensor=[Sensor|EString] comparator=Comparator (value=Signal | digitalvalue=EInt);

 
BooleanCondition:
	operator=Operator '(' sensor=[Sensor|EString] comparator=Comparator (value=Signal | digitalvalue=EInt) ')';
       
         //(sensor=[Sensor|EString] 'is' value=Signal) ;
         
SinkError returns SinkError:
	'if' '('basecondition=BaseCondition')' (booleancondition+=BooleanCondition)* '=>' 'error' value=EInt 
;
         
enum Signal returns Signal:
    HIGH = 'HIGH' | LOW = 'LOW'
;
enum Operator returns Operator:
	AND='AND' | OR='OR'
;

enum Comparator returns Comparator:
	sup='>'| inf='<' | equ='=='| esup = '>=' | einf = '<='
;

enum Type returns Type:
	analog='analog' | digital = 'digital'
;