/*
 * generated by Xtext
 */
grammar InternalRythmML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.rythmML.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.rythmML.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.rythmML.services.RythmMLGrammarAccess;

}

@parser::members {
 
 	private RythmMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RythmMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSong
entryRuleSong 
:
{ before(grammarAccess.getSongRule()); }
	 ruleSong
{ after(grammarAccess.getSongRule()); } 
	 EOF 
;

// Rule Song
ruleSong
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSongAccess().getGroup()); }
(rule__Song__Group__0)
{ after(grammarAccess.getSongAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrack
entryRuleTrack 
:
{ before(grammarAccess.getTrackRule()); }
	 ruleTrack
{ after(grammarAccess.getTrackRule()); } 
	 EOF 
;

// Rule Track
ruleTrack
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrackAccess().getTrackKeyword()); }

	'Track' 

{ after(grammarAccess.getTrackAccess().getTrackKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBar
entryRuleBar 
:
{ before(grammarAccess.getBarRule()); }
	 ruleBar
{ after(grammarAccess.getBarRule()); } 
	 EOF 
;

// Rule Bar
ruleBar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBarAccess().getGroup()); }
(rule__Bar__Group__0)
{ after(grammarAccess.getBarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeat
entryRuleBeat 
:
{ before(grammarAccess.getBeatRule()); }
	 ruleBeat
{ after(grammarAccess.getBeatRule()); } 
	 EOF 
;

// Rule Beat
ruleBeat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBeatAccess().getGroup()); }
(rule__Beat__Group__0)
{ after(grammarAccess.getBeatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTick
entryRuleTick 
:
{ before(grammarAccess.getTickRule()); }
	 ruleTick
{ after(grammarAccess.getTickRule()); } 
	 EOF 
;

// Rule Tick
ruleTick
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTickAccess().getGroup()); }
(rule__Tick__Group__0)
{ after(grammarAccess.getTickAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Song__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__0__Impl
	rule__Song__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getSongKeyword_0()); }

	'Song' 

{ after(grammarAccess.getSongAccess().getSongKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__1__Impl
	rule__Song__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSongAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__2__Impl
	rule__Song__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getTracksKeyword_2()); }

	'tracks' 

{ after(grammarAccess.getSongAccess().getTracksKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__3__Impl
	rule__Song__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSongAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__4__Impl
	rule__Song__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getTracksAssignment_4()); }
(rule__Song__TracksAssignment_4)
{ after(grammarAccess.getSongAccess().getTracksAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__5__Impl
	rule__Song__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getGroup_5()); }
(rule__Song__Group_5__0)*
{ after(grammarAccess.getSongAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__6__Impl
	rule__Song__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getSongAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getSongAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Song__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group_5__0__Impl
	rule__Song__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getSongAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Song__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getTracksAssignment_5_1()); }
(rule__Song__TracksAssignment_5_1)
{ after(grammarAccess.getSongAccess().getTracksAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__0__Impl
	rule__Bar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBarKeyword_0()); }

	'Bar' 

{ after(grammarAccess.getBarAccess().getBarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__1__Impl
	rule__Bar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBarAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__2__Impl
	rule__Bar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBeatsKeyword_2()); }

	'beats' 

{ after(grammarAccess.getBarAccess().getBeatsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__3__Impl
	rule__Bar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getBarAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__4__Impl
	rule__Bar__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBeatsAssignment_4()); }
(rule__Bar__BeatsAssignment_4)
{ after(grammarAccess.getBarAccess().getBeatsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__5__Impl
	rule__Bar__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getGroup_5()); }
(rule__Bar__Group_5__0)*
{ after(grammarAccess.getBarAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__6__Impl
	rule__Bar__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getBarAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getBarAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Bar__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group_5__0__Impl
	rule__Bar__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getBarAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bar__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bar__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBeatsAssignment_5_1()); }
(rule__Bar__BeatsAssignment_5_1)
{ after(grammarAccess.getBarAccess().getBeatsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Beat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__0__Impl
	rule__Beat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getBeatKeyword_0()); }

	'Beat' 

{ after(grammarAccess.getBeatAccess().getBeatKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__1__Impl
	rule__Beat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBeatAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__2__Impl
	rule__Beat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getTicksKeyword_2()); }

	'ticks' 

{ after(grammarAccess.getBeatAccess().getTicksKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__3__Impl
	rule__Beat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getBeatAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__4__Impl
	rule__Beat__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getTicksAssignment_4()); }
(rule__Beat__TicksAssignment_4)
{ after(grammarAccess.getBeatAccess().getTicksAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__5__Impl
	rule__Beat__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getGroup_5()); }
(rule__Beat__Group_5__0)*
{ after(grammarAccess.getBeatAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__6__Impl
	rule__Beat__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getBeatAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getBeatAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Beat__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group_5__0__Impl
	rule__Beat__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getBeatAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Beat__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getTicksAssignment_5_1()); }
(rule__Beat__TicksAssignment_5_1)
{ after(grammarAccess.getBeatAccess().getTicksAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tick__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tick__Group__0__Impl
	rule__Tick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tick__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTickAccess().getTickAction_0()); }
(

)
{ after(grammarAccess.getTickAccess().getTickAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tick__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tick__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tick__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTickAccess().getTickKeyword_1()); }

	'Tick' 

{ after(grammarAccess.getTickAccess().getTickKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Song__TracksAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getTracksTrackParserRuleCall_4_0()); }
	ruleTrack{ after(grammarAccess.getSongAccess().getTracksTrackParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Song__TracksAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSongAccess().getTracksTrackParserRuleCall_5_1_0()); }
	ruleTrack{ after(grammarAccess.getSongAccess().getTracksTrackParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Bar__BeatsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBeatsBeatParserRuleCall_4_0()); }
	ruleBeat{ after(grammarAccess.getBarAccess().getBeatsBeatParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bar__BeatsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBarAccess().getBeatsBeatParserRuleCall_5_1_0()); }
	ruleBeat{ after(grammarAccess.getBarAccess().getBeatsBeatParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__TicksAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getTicksTickParserRuleCall_4_0()); }
	ruleTick{ after(grammarAccess.getBeatAccess().getTicksTickParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__TicksAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeatAccess().getTicksTickParserRuleCall_5_1_0()); }
	ruleTick{ after(grammarAccess.getBeatAccess().getTicksTickParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


