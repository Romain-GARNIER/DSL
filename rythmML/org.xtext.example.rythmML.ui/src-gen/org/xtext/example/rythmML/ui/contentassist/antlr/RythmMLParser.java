/*
 * generated by Xtext
 */
package org.xtext.example.rythmML.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.rythmML.services.RythmMLGrammarAccess;

public class RythmMLParser extends AbstractContentAssistParser {
	
	@Inject
	private RythmMLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.rythmML.ui.contentassist.antlr.internal.InternalRythmMLParser createParser() {
		org.xtext.example.rythmML.ui.contentassist.antlr.internal.InternalRythmMLParser result = new org.xtext.example.rythmML.ui.contentassist.antlr.internal.InternalRythmMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSongAccess().getGroup(), "rule__Song__Group__0");
					put(grammarAccess.getSongAccess().getGroup_5(), "rule__Song__Group_5__0");
					put(grammarAccess.getTrackAccess().getGroup(), "rule__Track__Group__0");
					put(grammarAccess.getTrackAccess().getGroup_5(), "rule__Track__Group_5__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup_5(), "rule__Sequence__Group_5__0");
					put(grammarAccess.getBarAccess().getGroup(), "rule__Bar__Group__0");
					put(grammarAccess.getBarAccess().getGroup_5(), "rule__Bar__Group_5__0");
					put(grammarAccess.getBeatAccess().getGroup(), "rule__Beat__Group__0");
					put(grammarAccess.getBeatAccess().getGroup_5(), "rule__Beat__Group_5__0");
					put(grammarAccess.getTickAccess().getGroup(), "rule__Tick__Group__0");
					put(grammarAccess.getSongAccess().getTracksAssignment_4(), "rule__Song__TracksAssignment_4");
					put(grammarAccess.getSongAccess().getTracksAssignment_5_1(), "rule__Song__TracksAssignment_5_1");
					put(grammarAccess.getTrackAccess().getSequencesAssignment_4(), "rule__Track__SequencesAssignment_4");
					put(grammarAccess.getTrackAccess().getSequencesAssignment_5_1(), "rule__Track__SequencesAssignment_5_1");
					put(grammarAccess.getSequenceAccess().getBarsAssignment_4(), "rule__Sequence__BarsAssignment_4");
					put(grammarAccess.getSequenceAccess().getBarsAssignment_5_1(), "rule__Sequence__BarsAssignment_5_1");
					put(grammarAccess.getBarAccess().getBeatsAssignment_4(), "rule__Bar__BeatsAssignment_4");
					put(grammarAccess.getBarAccess().getBeatsAssignment_5_1(), "rule__Bar__BeatsAssignment_5_1");
					put(grammarAccess.getBeatAccess().getTicksAssignment_4(), "rule__Beat__TicksAssignment_4");
					put(grammarAccess.getBeatAccess().getTicksAssignment_5_1(), "rule__Beat__TicksAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.rythmML.ui.contentassist.antlr.internal.InternalRythmMLParser typedParser = (org.xtext.example.rythmML.ui.contentassist.antlr.internal.InternalRythmMLParser) parser;
			typedParser.entryRuleSong();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RythmMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RythmMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
