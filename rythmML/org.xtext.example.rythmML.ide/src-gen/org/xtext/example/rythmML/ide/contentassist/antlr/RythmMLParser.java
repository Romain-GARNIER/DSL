/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.rythmML.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.rythmML.ide.contentassist.antlr.internal.InternalRythmMLParser;
import org.xtext.example.rythmML.services.RythmMLGrammarAccess;

public class RythmMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RythmMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RythmMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSongAccess().getGroup(), "rule__Song__Group__0");
			builder.put(grammarAccess.getSongAccess().getGroup_5(), "rule__Song__Group_5__0");
			builder.put(grammarAccess.getTrackAccess().getGroup(), "rule__Track__Group__0");
			builder.put(grammarAccess.getTrackAccess().getGroup_5(), "rule__Track__Group_5__0");
			builder.put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
			builder.put(grammarAccess.getSequenceAccess().getGroup_5(), "rule__Sequence__Group_5__0");
			builder.put(grammarAccess.getBarAccess().getGroup(), "rule__Bar__Group__0");
			builder.put(grammarAccess.getBarAccess().getGroup_5(), "rule__Bar__Group_5__0");
			builder.put(grammarAccess.getBeatAccess().getGroup(), "rule__Beat__Group__0");
			builder.put(grammarAccess.getBeatAccess().getGroup_5(), "rule__Beat__Group_5__0");
			builder.put(grammarAccess.getTickAccess().getGroup(), "rule__Tick__Group__0");
			builder.put(grammarAccess.getSongAccess().getTracksAssignment_4(), "rule__Song__TracksAssignment_4");
			builder.put(grammarAccess.getSongAccess().getTracksAssignment_5_1(), "rule__Song__TracksAssignment_5_1");
			builder.put(grammarAccess.getTrackAccess().getSequencesAssignment_4(), "rule__Track__SequencesAssignment_4");
			builder.put(grammarAccess.getTrackAccess().getSequencesAssignment_5_1(), "rule__Track__SequencesAssignment_5_1");
			builder.put(grammarAccess.getSequenceAccess().getBarsAssignment_4(), "rule__Sequence__BarsAssignment_4");
			builder.put(grammarAccess.getSequenceAccess().getBarsAssignment_5_1(), "rule__Sequence__BarsAssignment_5_1");
			builder.put(grammarAccess.getBarAccess().getBeatsAssignment_4(), "rule__Bar__BeatsAssignment_4");
			builder.put(grammarAccess.getBarAccess().getBeatsAssignment_5_1(), "rule__Bar__BeatsAssignment_5_1");
			builder.put(grammarAccess.getBeatAccess().getTicksAssignment_4(), "rule__Beat__TicksAssignment_4");
			builder.put(grammarAccess.getBeatAccess().getTicksAssignment_5_1(), "rule__Beat__TicksAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RythmMLGrammarAccess grammarAccess;

	@Override
	protected InternalRythmMLParser createParser() {
		InternalRythmMLParser result = new InternalRythmMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RythmMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RythmMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
