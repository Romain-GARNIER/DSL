/*
 * generated by Xtext
 */
package org.xtext.example.rythmML.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.rythmML.services.RythmMLGrammarAccess;
import rythmML.Bar;
import rythmML.Beat;
import rythmML.RythmMLPackage;
import rythmML.Sequence;
import rythmML.Song;
import rythmML.Tick;
import rythmML.Track;

@SuppressWarnings("all")
public abstract class AbstractRythmMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RythmMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RythmMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RythmMLPackage.BAR:
				sequence_Bar(context, (Bar) semanticObject); 
				return; 
			case RythmMLPackage.BEAT:
				sequence_Beat(context, (Beat) semanticObject); 
				return; 
			case RythmMLPackage.SEQUENCE:
				sequence_Sequence(context, (Sequence) semanticObject); 
				return; 
			case RythmMLPackage.SONG:
				sequence_Song(context, (Song) semanticObject); 
				return; 
			case RythmMLPackage.TICK:
				sequence_Tick(context, (Tick) semanticObject); 
				return; 
			case RythmMLPackage.TRACK:
				sequence_Track(context, (Track) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Bar returns Bar
	 *
	 * Constraint:
	 *     (beats+=Beat beats+=Beat*)
	 */
	protected void sequence_Bar(ISerializationContext context, Bar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Beat returns Beat
	 *
	 * Constraint:
	 *     (ticks+=Tick ticks+=Tick*)
	 */
	protected void sequence_Beat(ISerializationContext context, Beat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sequence returns Sequence
	 *
	 * Constraint:
	 *     (bars+=Bar bars+=Bar*)
	 */
	protected void sequence_Sequence(ISerializationContext context, Sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Song returns Song
	 *
	 * Constraint:
	 *     (tracks+=Track tracks+=Track*)
	 */
	protected void sequence_Song(ISerializationContext context, Song semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tick returns Tick
	 *
	 * Constraint:
	 *     {Tick}
	 */
	protected void sequence_Tick(ISerializationContext context, Tick semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Track returns Track
	 *
	 * Constraint:
	 *     (sequences+=Sequence sequences+=Sequence*)
	 */
	protected void sequence_Track(ISerializationContext context, Track semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
