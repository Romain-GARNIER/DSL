/*
 * generated by Xtext
 */
package org.xtext.example.rythmML.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RythmMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Song");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTracksKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTracksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTracksTrackParserRuleCall_4_0 = (RuleCall)cTracksAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTracksAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTracksTrackParserRuleCall_5_1_0 = (RuleCall)cTracksAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Song:
		//	'Song'
		//	'{'
		//	'tracks' '{' tracks+=Track ("," tracks+=Track)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Song' '{' 'tracks' '{' tracks+=Track ("," tracks+=Track)* '}' '}'
		public Group getGroup() { return cGroup; }

		//'Song'
		public Keyword getSongKeyword_0() { return cSongKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'tracks'
		public Keyword getTracksKeyword_2() { return cTracksKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//tracks+=Track
		public Assignment getTracksAssignment_4() { return cTracksAssignment_4; }

		//Track
		public RuleCall getTracksTrackParserRuleCall_4_0() { return cTracksTrackParserRuleCall_4_0; }

		//("," tracks+=Track)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//tracks+=Track
		public Assignment getTracksAssignment_5_1() { return cTracksAssignment_5_1; }

		//Track
		public RuleCall getTracksTrackParserRuleCall_5_1_0() { return cTracksTrackParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Track");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSequencesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSequencesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSequencesSequenceParserRuleCall_4_0 = (RuleCall)cSequencesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSequencesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSequencesSequenceParserRuleCall_5_1_0 = (RuleCall)cSequencesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Track:
		//	'Track'
		//	'{'
		//	'sequences' '{' sequences+=Sequence ("," sequences+=Sequence)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Track' '{' 'sequences' '{' sequences+=Sequence ("," sequences+=Sequence)* '}' '}'
		public Group getGroup() { return cGroup; }

		//'Track'
		public Keyword getTrackKeyword_0() { return cTrackKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'sequences'
		public Keyword getSequencesKeyword_2() { return cSequencesKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//sequences+=Sequence
		public Assignment getSequencesAssignment_4() { return cSequencesAssignment_4; }

		//Sequence
		public RuleCall getSequencesSequenceParserRuleCall_4_0() { return cSequencesSequenceParserRuleCall_4_0; }

		//("," sequences+=Sequence)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//sequences+=Sequence
		public Assignment getSequencesAssignment_5_1() { return cSequencesAssignment_5_1; }

		//Sequence
		public RuleCall getSequencesSequenceParserRuleCall_5_1_0() { return cSequencesSequenceParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBarsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBarsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBarsBarParserRuleCall_4_0 = (RuleCall)cBarsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBarsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBarsBarParserRuleCall_5_1_0 = (RuleCall)cBarsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Sequence:
		//	'Sequence'
		//	'{'
		//	'bars' '{' bars+=Bar ("," bars+=Bar)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Sequence' '{' 'bars' '{' bars+=Bar ("," bars+=Bar)* '}' '}'
		public Group getGroup() { return cGroup; }

		//'Sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'bars'
		public Keyword getBarsKeyword_2() { return cBarsKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//bars+=Bar
		public Assignment getBarsAssignment_4() { return cBarsAssignment_4; }

		//Bar
		public RuleCall getBarsBarParserRuleCall_4_0() { return cBarsBarParserRuleCall_4_0; }

		//("," bars+=Bar)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//bars+=Bar
		public Assignment getBarsAssignment_5_1() { return cBarsAssignment_5_1; }

		//Bar
		public RuleCall getBarsBarParserRuleCall_5_1_0() { return cBarsBarParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Bar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBeatsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBeatsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBeatsBeatParserRuleCall_4_0 = (RuleCall)cBeatsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBeatsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBeatsBeatParserRuleCall_5_1_0 = (RuleCall)cBeatsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Bar:
		//	'Bar'
		//	'{'
		//	'beats' '{' beats+=Beat ("," beats+=Beat)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Bar' '{' 'beats' '{' beats+=Beat ("," beats+=Beat)* '}' '}'
		public Group getGroup() { return cGroup; }

		//'Bar'
		public Keyword getBarKeyword_0() { return cBarKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'beats'
		public Keyword getBeatsKeyword_2() { return cBeatsKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//beats+=Beat
		public Assignment getBeatsAssignment_4() { return cBeatsAssignment_4; }

		//Beat
		public RuleCall getBeatsBeatParserRuleCall_4_0() { return cBeatsBeatParserRuleCall_4_0; }

		//("," beats+=Beat)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//beats+=Beat
		public Assignment getBeatsAssignment_5_1() { return cBeatsAssignment_5_1; }

		//Beat
		public RuleCall getBeatsBeatParserRuleCall_5_1_0() { return cBeatsBeatParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Beat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTicksKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTicksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTicksTickParserRuleCall_4_0 = (RuleCall)cTicksAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTicksAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTicksTickParserRuleCall_5_1_0 = (RuleCall)cTicksAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Beat:
		//	'Beat'
		//	'{'
		//	'ticks' '{' ticks+=Tick ("," ticks+=Tick)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Beat' '{' 'ticks' '{' ticks+=Tick ("," ticks+=Tick)* '}' '}'
		public Group getGroup() { return cGroup; }

		//'Beat'
		public Keyword getBeatKeyword_0() { return cBeatKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//'ticks'
		public Keyword getTicksKeyword_2() { return cTicksKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//ticks+=Tick
		public Assignment getTicksAssignment_4() { return cTicksAssignment_4; }

		//Tick
		public RuleCall getTicksTickParserRuleCall_4_0() { return cTicksTickParserRuleCall_4_0; }

		//("," ticks+=Tick)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ticks+=Tick
		public Assignment getTicksAssignment_5_1() { return cTicksAssignment_5_1; }

		//Tick
		public RuleCall getTicksTickParserRuleCall_5_1_0() { return cTicksTickParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.rythmML.RythmML.Tick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTickAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Tick:
		//	{Tick}
		//	'Tick';
		@Override public ParserRule getRule() { return rule; }

		//{Tick} 'Tick'
		public Group getGroup() { return cGroup; }

		//{Tick}
		public Action getTickAction_0() { return cTickAction_0; }

		//'Tick'
		public Keyword getTickKeyword_1() { return cTickKeyword_1; }
	}
	
	
	private final SongElements pSong;
	private final TrackElements pTrack;
	private final SequenceElements pSequence;
	private final BarElements pBar;
	private final BeatElements pBeat;
	private final TickElements pTick;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RythmMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSong = new SongElements();
		this.pTrack = new TrackElements();
		this.pSequence = new SequenceElements();
		this.pBar = new BarElements();
		this.pBeat = new BeatElements();
		this.pTick = new TickElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.rythmML.RythmML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Song:
	//	'Song'
	//	'{'
	//	'tracks' '{' tracks+=Track ("," tracks+=Track)* '}'
	//	'}';
	public SongElements getSongAccess() {
		return pSong;
	}
	
	public ParserRule getSongRule() {
		return getSongAccess().getRule();
	}

	//Track:
	//	'Track'
	//	'{'
	//	'sequences' '{' sequences+=Sequence ("," sequences+=Sequence)* '}'
	//	'}';
	public TrackElements getTrackAccess() {
		return pTrack;
	}
	
	public ParserRule getTrackRule() {
		return getTrackAccess().getRule();
	}

	//Sequence:
	//	'Sequence'
	//	'{'
	//	'bars' '{' bars+=Bar ("," bars+=Bar)* '}'
	//	'}';
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Bar:
	//	'Bar'
	//	'{'
	//	'beats' '{' beats+=Beat ("," beats+=Beat)* '}'
	//	'}';
	public BarElements getBarAccess() {
		return pBar;
	}
	
	public ParserRule getBarRule() {
		return getBarAccess().getRule();
	}

	//Beat:
	//	'Beat'
	//	'{'
	//	'ticks' '{' ticks+=Tick ("," ticks+=Tick)* '}'
	//	'}';
	public BeatElements getBeatAccess() {
		return pBeat;
	}
	
	public ParserRule getBeatRule() {
		return getBeatAccess().getRule();
	}

	//Tick:
	//	{Tick}
	//	'Tick';
	public TickElements getTickAccess() {
		return pTick;
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
